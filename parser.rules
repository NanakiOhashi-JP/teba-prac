{ $id:IDN } => { ('':_B_X $id '':_E_X) }
{ $num:NUM } => { ('':_B_X $num '':_E_X) }

# マクロ
@ANY => { [ $:/./ ]* }
@SP => { [ $:/SP_/ ]** }
@UNARY_OP => { $:OP/[\+-]/ }

# カッコ内の計算
REPEAT {
  { ($pl:P_L $any:@ANY $pr:P_R) }
       => { ('':_B_X   $pl:_XP_L $any $pr:_XP_R   '':_E_X) }
}

{ $pl:_XP_L } => { $pl:P_L }
{ $pr:_XP_R } => { $pr:P_R }

# 単項演算子
{ $e:_E_X $sp:@SP $op:@UNARY_OP }
=> { ($e:_E_X $sp $op:_OP_BIN) }

{ $op:@UNARY_OP } => { $op:OP_U }
{ $opbin:_OP_BIN } => { $opbin:OP }

REPEAT{
{ $opu:OP_U $sp:@SP ($b:_B_X $right:@ANY $e:_E_X) }
=> { ('':_B_X $opu $sp $b:B_P $right $e:E_P '':_E_X) }
}

# 二項演算子（＊／）
{ $op:OP/[\*\/]/ $sp:@SP ($b:_B_X $right:@ANY $e:_E_X) }
=> { ('':_B_OP $op $sp $b:B_P $right $e:E_P '':_E_OP) }

REPEAT{
{ ($b:_B_X $left:@ANY $e:_E_X) $sp:@SP ($:_B_OP $right:@ANY $:_E_OP) }
=> { ('':_B_X $b:B_P $left $e:E_P $sp $right '':_E_X) }
}

# 二項演算子（＋ー）
{ $op:OP/[\+-]/ $sp:@SP ($b:_B_X $right:@ANY $e:_E_X) }
=> { ('':_B_OP $op $sp $b:B_P $right $e:E_P '':_E_OP) }

REPEAT{
{ ($b:_B_X $left:@ANY $e:_E_X) $sp:@SP ($:_B_OP $right:@ANY $:_E_OP) }
=> { ('':_B_X $b:B_P $left $e:E_P $sp $right '':_E_X) }
}

# 二項演算子（< <= > >= ==）
{ $op:OP/[<>]=?|==/ $sp:@SP ($b:_B_X $right:@ANY $e:_E_X) }
=> { ('':_B_OP $op $sp $b:B_P $right $e:E_P '':_E_OP) }

REPEAT{
{ ($b:_B_X $left:@ANY $e:_E_X) $sp:@SP ($:_B_OP $right:@ANY $:_E_OP) }
=> { ('':_B_X $b:B_P $left $e:E_P $sp $right '':_E_X) }
}


# 二項演算子（右結合）
{ ($b:_B_X $left:@ANY $e:_E_X) $sp:@SP $op:OP/=/ }
=> { ('':_B_OP $b:B_P $left $e:E_P $sp $op '':_E_OP) }

REPEAT{
{ ($:_B_OP $left:@ANY $:_E_OP) $sp:@SP ($b:_B_X $right:@ANY $e:_E_X) }
=> { ('':_B_X $left $sp $b:B_P $right $e:E_P '':_E_X) }
}

# _B_Xと_E_Xを置換
{ $b:_B_X } => { $b:B_P }
{ $e:_E_X } => { $e:E_P }

# SC型の置き換え(for文)
CONTEXT {
  $:RE_FOR $:@SP ($:B_P ( $:@ANY ) $:E_P) 
}{ 
  { $sc:SC } => { $sc:FSC }
}

# 式文の識別
{ [est: ($b:B_P $expr:@ANY $e:E_P) $sp:@SP $sc:SC] }
=> { ('':_B_ST $est '':_E_ST) }

# 複合文の識別
REPEAT{
{ $cl:C_L $any:@ANY $cr:C_R }
=> { ('':_B_ST $cl:_XC_L $any $cr:_XC_R '':_E_ST) }
}

{ $cl:_XC_L } => { $cl:C_L }
{ $cr:_XC_R } => { $cr:C_R }


REPEAT{

# if文
## 1. if節 
{ [if: $:RE_IF $:@SP ($:B_P $:@ANY $:E_P) $:@SP] ($b:_B_ST $any:@ANY $e:_E_ST) }
=> { ('':_B_IF $if ($b:B_ST $any $e:E_ST) '':_E_IF) }
## 2. else節
{ [else: $:RE_ELSE $:@SP] ($b:_B_ST $any:@ANY $e:_E_ST) }
=> { ('':_B_EL $else ($b:B_ST $any $e:E_ST) '':_E_EL) }
## 3. if文の認識
{ ($:_B_IF $iany:@ANY $:_E_IF) $sp:@SP ($:_B_EL $eany:@ANY $:_E_EL) }
=> { ('':_B_ST $iany $sp $eany '':_E_ST) }
## 4. elseマッチング
{ ($:_B_IF $ifany:@ANY $:_E_IF) $sp:@SP [end: [: $:RE_ELSE ]! | $:@ANY ] }
=> { ('':_B_ST $ifany '':_E_ST) $sp $end }

# while文
{ [while: $:RE_WHILE $:@SP ($:B_P $:@ANY $:E_P) $:@SP] ($b:_B_ST $any:@ANY $e:_E_ST) }
=> { ('':_B_ST $while ($b:B_ST $any $e:E_ST) '':_E_ST) }

# for文
{ [for: $:RE_FOR $:@SP ($:B_P $:@ANY $:E_P) $:@SP] ($b:_B_ST $any:@ANY $e:_E_ST) }
=> { ('':_B_ST $for ($b:B_ST $any $e:E_ST) '':_E_ST) }
}

# _B_STと_E_STの置き換え
{ $b:_B_ST } => { $b:B_ST }
{ $e:_E_ST } => { $e:E_ST }

# 制御文の置き換え
{ $re:/RE_(IF|WHILE|FOR)/ $sp:@SP ($:B_P $cond:@ANY $:E_P) }
=> { $re $sp $cond }

# 変数宣言
{ [type: $type:TYPE $:@SP] ($:B_ST $var:@ANY $:E_ST) }
=> { ('':B_DE $type $var '':E_DE) }